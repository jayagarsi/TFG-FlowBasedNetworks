---1 1) GRAF CREAT PER MI COM A EXEMPLE ---
    int n = 4;
    int k = 3;
    G.buyEdge(0, 1, 2);
    G.buyEdge(0, 3, 1);
    G.buyEdge(1, 0, 1);
    G.buyEdge(1, 2, 2);
    G.buyEdge(2, 0, 3);
    G.buyEdge(3, 0, 3);

--- 2) PRIMER GRAF DE L'ARTICLE ---
    int n = 4;
    int k = 2;
    // Vertex 0 == v, 1 == x, 2 == y, z == 3
    G.buyEdge(0, 1, 1);
    G.buyEdge(0, 3, 1);
    G.buyEdge(1, 0, 1);
    G.buyEdge(1, 3, 1);
    G.buyEdge(2, 1, 1);
    G.buyEdge(2, 3, 1);
    G.buyEdge(3, 2, 2);

--- 3) GRAF OPTIM CICLE ARTICLE ---
    int n = 6;
    int k = 2;
    G.buyEdge(0, 1, k);
    G.buyEdge(1, 2, k);
    G.buyEdge(2, 3, k);
    G.buyEdge(3, 4, k);
    G.buyEdge(4, 5, k);
    G.buyEdge(5, 0, k);

--- 4) GRAF AMB IRC DE MIN-FLOW ---
    int n = 6;
    int k = 2;
    // Vertex a == 0, b == 1, c == 2, d == 3, f == 4, g == 5
    G.buyEdge(0, 1, 2);
    G.buyEdge(1, 0, 1);
    G.buyEdge(1, 3, 1);
    G.buyEdge(2, 1, 2);
    G.buyEdge(3, 4, 2);
    G.buyEdge(4, 2, 1);
    G.buyEdge(4, 3, 1);
    G.buyEdge(5, 4, 2);

    //int v[] = {4, 1, 0, 2, 3, 5};
    //vector<int> order(v, v+sizeof(v)/sizeof(int));
    //G.simulateGameDynamics(model, order);

--- 5) GRAF AMB IRC DE AVG-FLOW ---
    int n = 5;
    int k = 3;
    // Vertex a == 0, b == 1, c == 2, d == 3, e == 4
    G.buyEdge(0, 1, 1);
    G.buyEdge(0, 2, 1);
    G.buyEdge(0, 4, 1);
    G.buyEdge(1, 2, 2);
    G.buyEdge(1, 3, 1);
    G.buyEdge(2, 0, 1);
    G.buyEdge(2, 3, 2);
    G.buyEdge(3, 1, 1);
    G.buyEdge(3, 2, 1);
    G.buyEdge(3, 4, 1);
    G.buyEdge(4, 0, 1);
    G.buyEdge(4, 3, 2);

--- 6) GRAF ARBRE AMB MATEIX BUDGET K ---
    n = 7;
    k = 2;
    G.buyEdge(0, 1, 1);
    G.buyEdge(0, 2, 1);
    G.buyEdge(1, 3, 1);
    G.buyEdge(1, 4, 1);
    G.buyEdge(3, 1, 2);
    G.buyEdge(4, 1, 2);
    G.buyEdge(2, 5, 1);
    G.buyEdge(2, 6, 1);
    G.buyEdge(5, 2, 2);
    G.buyEdge(6, 2, 2);
    # el min-cut sempre sera com a maxim k 
    # doncs amb tallar una aresta n'hi ha prou

--- 7) GRAF COMPLET MATEIX BUDGET ---
    int n = 5;
    int k = n-1;
    for (int u = 0; u < n; ++u)
        for (int v = 0; v < n; ++v)
            if (v != u)
                G.buyEdge(u, v, 1);

--- 8) GRAF AMB MIN-CUT < min(deg(v)) \forall v \in G
    int n = 7;
    int k = 2;
    G.buyEdge(0, 1, 1);
    G.buyEdge(0, 5, 1);
    G.buyEdge(1, 2, 1);
    G.buyEdge(1, 0, 1);
    G.buyEdge(2, 3, 2);
    G.buyEdge(3, 4, 2);
    G.buyEdge(4, 3, 2);
    G.buyEdge(5, 0, 1);
    G.buyEdge(5, 6, 1);
    G.buyEdge(6, 3, 2);


--- 9) GRAF PER VEURE SI REDUCCIÓ A IS ÉS FACTIBLE ---
    int n = 7;
    int k = 2;
    G.buyEdge(0, 1, 2);
    G.buyEdge(1, 2, 1);
    G.buyEdge(1, 3, 1);
    G.buyEdge(2, 0, 1);
    G.buyEdge(2, 5, 1);
    G.buyEdge(3, 4, 2);
    G.buyEdge(4, 5, 2);
    G.buyEdge(5, 6, 2);
    G.buyEdge(6, 3, 2);



PYTHON

--- GRAF CICLE AMB BUDGETS DIFERENTS ---
    n = 7
    k = 3
    G = nx.DiGraph()
    G.add_edge("a", "b", weight = 1)
    G.add_edge("b", "c", weight = 3)
    G.add_edge("c", "d", weight = 3)
    G.add_edge("d", "e", weight = 3)
    G.add_edge("e", "f", weight = 3)
    G.add_edge("f", "g", weight = 3)
    G.add_edge("g", "a", weight = 6)
    # si fem un cicle biconnex el maxim min-cut dependra dels dos budgets més petits

--- GRAF GENERAT AMB ALG GREEDY FET PER MI PER LA OPT AMB BUDGET VARIABLE ---
    n = 5
    k = [1, 2, 2, 3, 4]
    G = nx.DiGraph()
    G.add_edge(1, 2, weight = k[0])
    G.add_edge(2, 3, weight = k[1])
    G.add_edge(3, 4, weight = k[2])
    G.add_edge(4, 5, weight = k[3]-1)
    G.add_edge(4, 3, weight = 1)
    G.add_edge(5, 1, weight = k[4]-1)
    G.add_edge(5, 2, weight = 1)

--- GRAF ARBRE AMB BUDGETS DIFERENTS ---
    n = 7
    k = [2, 2, 3, 3, 4, 5, 6]
    G = nx.DiGraph()
    G.add_edge(1, 2, weight = k[0]/2)
    G.add_edge(1, 3, weight = k[0]/2)
    G.add_edge(2, 4, weight = k[1]/2)
    G.add_edge(2, 5, weight = k[1]/2)
    G.add_edge(4, 2, weight = k[3])
    G.add_edge(5, 2, weight = k[4])
    G.add_edge(3, 6, weight = k[2]-2)
    G.add_edge(3, 7, weight = k[2]-2)
    G.add_edge(3, 1, weight = k[2]-2)
    G.add_edge(6, 3, weight = k[5])
    G.add_edge(7, 3, weight = k[6])
    # el min-cut sempre depen de l'aresta amb menys capacitat
    # i aquesta aresta sempre estara connectada a l'agent amb
    # menys capacitat

--- GRAF ARBRE AMB MATEIX BUDGET K ---
    n = 7
    k = 2
    G = nx.DiGraph()
    G.add_edge(1, 2, weight = k)
    G.add_edge(1, 3, weight = k)
    G.add_edge(2, 4, weight = k)
    G.add_edge(2, 5, weight = k)
    G.add_edge(4, 2, weight = k)
    G.add_edge(5, 2, weight = k)
    G.add_edge(3, 6, weight = k)
    G.add_edge(3, 7, weight = k)
    G.add_edge(6, 3, weight = k)
    G.add_edge(7, 3, weight = k)
    # el min-cut sempre sera com a maxim k 
    # doncs amb tallar una aresta n'hi ha prou

--- GRAF NO SE ---
    G = nx.DiGraph()
    G.add_edge(1, 2, weight = 1)
    G.add_edge(2, 3, weight = 1)
    G.add_edge(2, 4, weight = 1)
    G.add_edge(3, 1, weight = 1)
    G.add_edge(3, 4, weight = 2)
    G.add_edge(4, 2, weight = 1)
    G.add_edge(4, 1, weight = 2)